/***************************************************************************************
 *    Title: x86 assembly debugger
 *    Author: Jakub Ber√°nek
 *    Date: 08/12/2022
 *    Code version: commit b952a3b
 *    Availability: https://github.com/Kobzol/davis
 ***************************************************************************************/
// @ts-nocheck
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
'use strict';
function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}
function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = 'SyntaxError';
  if (typeof Error.captureStackTrace === 'function') {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}
peg$subclass(peg$SyntaxError, Error);
peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function (expectation) {
      return '"' + literalEscape(expectation.text) + '"';
    },
    class: function (expectation) {
      var escapedParts = '',
        i;
      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts +=
          expectation.parts[i] instanceof Array
            ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
            : classEscape(expectation.parts[i]);
      }
      return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']';
    },
    any: function (expectation) {
      return 'any character';
    },
    end: function (expectation) {
      return 'end of input';
    },
    other: function (expectation) {
      return expectation.description;
    },
  };
  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }
  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
  }
  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g, '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
  }
  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }
  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
      i,
      j;
    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }
    descriptions.sort();
    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }
    switch (descriptions.length) {
      case 1:
        return descriptions[0];
      case 2:
        return descriptions[0] + ' or ' + descriptions[1];
      default:
        return (
          descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1]
        );
    }
  }
  function describeFound(found) {
    return found ? '"' + literalEscape(found) + '"' : 'end of input';
  }
  return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
};
function peg$parse(input, options) {
  options = options !== void 0 ? options : {};
  var peg$FAILED = {},
    peg$startRuleFunctions = { Start: peg$parseStart },
    peg$startRuleFunction = peg$parseStart,
    peg$c0 = 'section',
    peg$c1 = peg$literalExpectation('section', true),
    peg$c2 = '.data',
    peg$c3 = peg$literalExpectation('.data', true),
    peg$c4 = function (data) {
      return { line: data, location: location() };
    },
    peg$c5 = function (data) {
      return data;
    },
    peg$c6 = '.text',
    peg$c7 = peg$literalExpectation('.text', true),
    peg$c8 = function (data, text) {
      return { line: text, location: location() };
    },
    peg$c9 = function (data, text) {
      return text;
    },
    peg$c10 = function (data, text) {
      return { data: data !== null ? data : [], text: text !== null ? text : [] };
    },
    peg$c11 = ';',
    peg$c12 = peg$literalExpectation(';', false),
    peg$c13 = /^[^\n]/,
    peg$c14 = peg$classExpectation(['\n'], true, false),
    peg$c15 = ',',
    peg$c16 = peg$literalExpectation(',', false),
    peg$c17 = function (label, size, constant, c) {
      return c;
    },
    peg$c18 = function (label, size, constant, constants) {
      return { label: label, size: size, constants: [constant].concat(constants) };
    },
    peg$c19 = function (label) {
      return { label: label, size: null, constants: [] };
    },
    peg$c20 = 'db',
    peg$c21 = peg$literalExpectation('db', true),
    peg$c22 = function () {
      return 1;
    },
    peg$c23 = 'dw',
    peg$c24 = peg$literalExpectation('dw', true),
    peg$c25 = function () {
      return 2;
    },
    peg$c26 = 'dd',
    peg$c27 = peg$literalExpectation('dd', true),
    peg$c28 = function () {
      return 4;
    },
    peg$c29 = function (label, inst) {
      return { tag: 'Line', label: label, instruction: inst };
    },
    peg$c30 = function (label) {
      return { tag: 'Line', label: label, instruction: null };
    },
    peg$c31 = '.',
    peg$c32 = peg$literalExpectation('.', false),
    peg$c33 = ':',
    peg$c34 = peg$literalExpectation(':', false),
    peg$c35 = function (local, name) {
      return { tag: 'Label', name: name, local: local !== null };
    },
    peg$c36 = 'cld',
    peg$c37 = peg$literalExpectation('CLD', true),
    peg$c38 = 'std',
    peg$c39 = peg$literalExpectation('STD', true),
    peg$c40 = 'clc',
    peg$c41 = peg$literalExpectation('CLC', true),
    peg$c42 = 'stc',
    peg$c43 = peg$literalExpectation('STC', true),
    peg$c44 = 'enter',
    peg$c45 = peg$literalExpectation('ENTER', true),
    peg$c46 = 'ret',
    peg$c47 = peg$literalExpectation('RET', true),
    peg$c48 = 'leave',
    peg$c49 = peg$literalExpectation('LEAVE', true),
    peg$c50 = 'hlt',
    peg$c51 = peg$literalExpectation('HLT', true),
    peg$c52 = function () {
      return { tag: 'Instruction', type: 'NoOperand', name: text() };
    },
    peg$c53 = 'jmp',
    peg$c54 = peg$literalExpectation('JMP', true),
    peg$c55 = 'je',
    peg$c56 = peg$literalExpectation('JE', true),
    peg$c57 = 'jne',
    peg$c58 = peg$literalExpectation('JNE', true),
    peg$c59 = 'jz',
    peg$c60 = peg$literalExpectation('JZ', true),
    peg$c61 = 'jnz',
    peg$c62 = peg$literalExpectation('JNZ', true),
    peg$c63 = 'jb',
    peg$c64 = peg$literalExpectation('JB', true),
    peg$c65 = 'jnae',
    peg$c66 = peg$literalExpectation('JNAE', true),
    peg$c67 = 'jc',
    peg$c68 = peg$literalExpectation('JC', true),
    peg$c69 = 'jnb',
    peg$c70 = peg$literalExpectation('JNB', true),
    peg$c71 = 'jae',
    peg$c72 = peg$literalExpectation('JAE', true),
    peg$c73 = 'jnc',
    peg$c74 = peg$literalExpectation('JNC', true),
    peg$c75 = 'jbe',
    peg$c76 = peg$literalExpectation('JBE', true),
    peg$c77 = 'jna',
    peg$c78 = peg$literalExpectation('JNA', true),
    peg$c79 = 'ja',
    peg$c80 = peg$literalExpectation('JA', true),
    peg$c81 = 'jnbe',
    peg$c82 = peg$literalExpectation('JNBE', true),
    peg$c83 = 'jl',
    peg$c84 = peg$literalExpectation('JL', true),
    peg$c85 = 'jnge',
    peg$c86 = peg$literalExpectation('JNGE', true),
    peg$c87 = 'jge',
    peg$c88 = peg$literalExpectation('JGE', true),
    peg$c89 = 'jnl',
    peg$c90 = peg$literalExpectation('JNL', true),
    peg$c91 = 'jle',
    peg$c92 = peg$literalExpectation('JLE', true),
    peg$c93 = 'jng',
    peg$c94 = peg$literalExpectation('JNG', true),
    peg$c95 = 'jg',
    peg$c96 = peg$literalExpectation('JG', true),
    peg$c97 = 'jnle',
    peg$c98 = peg$literalExpectation('JNLE', true),
    peg$c99 = 'jcxz',
    peg$c100 = peg$literalExpectation('JCXZ', true),
    peg$c101 = 'jecxz',
    peg$c102 = peg$literalExpectation('JECXZ', true),
    peg$c103 = 'jp',
    peg$c104 = peg$literalExpectation('JP', true),
    peg$c105 = 'jpe',
    peg$c106 = peg$literalExpectation('JPE', true),
    peg$c107 = 'jnp',
    peg$c108 = peg$literalExpectation('JNP', true),
    peg$c109 = 'jpo',
    peg$c110 = peg$literalExpectation('JPO', true),
    peg$c111 = 'jo',
    peg$c112 = peg$literalExpectation('JO', true),
    peg$c113 = 'jno',
    peg$c114 = peg$literalExpectation('JNO', true),
    peg$c115 = 'js',
    peg$c116 = peg$literalExpectation('JS', true),
    peg$c117 = 'jns',
    peg$c118 = peg$literalExpectation('JNS', true),
    peg$c119 = 'call',
    peg$c120 = peg$literalExpectation('CALL', true),
    peg$c121 = 'loop',
    peg$c122 = peg$literalExpectation('LOOP', true),
    peg$c123 = function (name, target) {
      return { tag: 'Instruction', type: 'Jump', name: name, operands: [target] };
    },
    peg$c124 = 'pop',
    peg$c125 = peg$literalExpectation('POP', true),
    peg$c126 = 'inc',
    peg$c127 = peg$literalExpectation('INC', true),
    peg$c128 = 'dec',
    peg$c129 = peg$literalExpectation('DEC', true),
    peg$c130 = function (name, target) {
      return { tag: 'Instruction', type: 'SingleOperand', name: name, operands: [target] };
    },
    peg$c131 = 'push',
    peg$c132 = peg$literalExpectation('PUSH', true),
    peg$c133 = 'int',
    peg$c134 = peg$literalExpectation('INT', true),
    peg$c135 = 'mov',
    peg$c136 = peg$literalExpectation('MOV', true),
    peg$c137 = 'movsx',
    peg$c138 = peg$literalExpectation('MOVSX', true),
    peg$c139 = function (name, target, source) {
      return { tag: 'Instruction', type: 'Memory', name: name, operands: [target, source] };
    },
    peg$c140 = 'add',
    peg$c141 = peg$literalExpectation('ADD', true),
    peg$c142 = 'sub',
    peg$c143 = peg$literalExpectation('SUB', true),
    peg$c144 = 'adc',
    peg$c145 = peg$literalExpectation('ADC', true),
    peg$c146 = 'sbb',
    peg$c147 = peg$literalExpectation('SBB', true),
    peg$c148 = 'and',
    peg$c149 = peg$literalExpectation('AND', true),
    peg$c150 = 'or',
    peg$c151 = peg$literalExpectation('OR', true),
    peg$c152 = 'xor',
    peg$c153 = peg$literalExpectation('XOR', true),
    peg$c154 = function (name, target, source) {
      return {
        tag: 'Instruction',
        type: 'Arithmetic',
        name: name,
        operands: [target, source],
      };
    },
    peg$c155 = 'mul',
    peg$c156 = peg$literalExpectation('MUL', true),
    peg$c157 = 'imul',
    peg$c158 = peg$literalExpectation('IMUL', true),
    peg$c159 = 'div',
    peg$c160 = peg$literalExpectation('DIV', true),
    peg$c161 = 'idiv',
    peg$c162 = peg$literalExpectation('IDIV', true),
    peg$c163 = function (name, source) {
      return { tag: 'Instruction', type: 'Arithmetic', name: name, operands: [source] };
    },
    peg$c164 = 'cmp',
    peg$c165 = peg$literalExpectation('CMP', true),
    peg$c166 = function (name, op1, op2) {
      return { tag: 'Instruction', type: 'Compare', name: name, operands: [op1, op2] };
    },
    peg$c167 = function (cast, value) {
      return { tag: 'Cast', size: cast, value: value };
    },
    peg$c168 = '[',
    peg$c169 = peg$literalExpectation('[', false),
    peg$c170 = ']',
    peg$c171 = peg$literalExpectation(']', false),
    peg$c172 = function (label, index) {
      return { tag: 'Label', value: label.value, deref: true, index: index };
    },
    peg$c173 = function (number, index) {
      return { tag: 'Number', value: number.value, deref: true, index: index };
    },
    peg$c174 = function (local, target) {
      return { tag: 'Label', value: local !== null ? '.' + target.value : target.value };
    },
    peg$c175 = function (baseReg, index) {
      return {
        tag: 'Mem',
        baseRegister: baseReg,
        index: index,
      };
    },
    peg$c176 = '+',
    peg$c177 = peg$literalExpectation('+', false),
    peg$c178 = '*',
    peg$c179 = peg$literalExpectation('*', false),
    peg$c180 = function (register, multiplier) {
      return { register: register, multiplier: multiplier.value };
    },
    peg$c181 = '-',
    peg$c182 = peg$literalExpectation('-', false),
    peg$c183 = function (index, operator, constant) {
      if (operator === '-') {
        constant.value *= -1;
      }
      return constant;
    },
    peg$c184 = function (index, constant) {
      return { index: index, constant: constant };
    },
    peg$c185 = 'eax',
    peg$c186 = peg$literalExpectation('EAX', true),
    peg$c187 = 'ebx',
    peg$c188 = peg$literalExpectation('EBX', true),
    peg$c189 = 'ecx',
    peg$c190 = peg$literalExpectation('ECX', true),
    peg$c191 = 'edx',
    peg$c192 = peg$literalExpectation('EDX', true),
    peg$c193 = 'ebp',
    peg$c194 = peg$literalExpectation('EBP', true),
    peg$c195 = 'esp',
    peg$c196 = peg$literalExpectation('ESP', true),
    peg$c197 = 'edi',
    peg$c198 = peg$literalExpectation('EDI', true),
    peg$c199 = 'esi',
    peg$c200 = peg$literalExpectation('ESI', true),
    peg$c201 = function () {
      return { tag: 'Reg', name: text(), size: 4 };
    },
    peg$c202 = 'ax',
    peg$c203 = peg$literalExpectation('AX', true),
    peg$c204 = 'bx',
    peg$c205 = peg$literalExpectation('BX', true),
    peg$c206 = 'cx',
    peg$c207 = peg$literalExpectation('CX', true),
    peg$c208 = 'dx',
    peg$c209 = peg$literalExpectation('DX', true),
    peg$c210 = function () {
      return { tag: 'Reg', name: text(), size: 2 };
    },
    peg$c211 = 'ah',
    peg$c212 = peg$literalExpectation('AH', true),
    peg$c213 = 'bh',
    peg$c214 = peg$literalExpectation('BH', true),
    peg$c215 = 'ch',
    peg$c216 = peg$literalExpectation('CH', true),
    peg$c217 = 'dh',
    peg$c218 = peg$literalExpectation('DH', true),
    peg$c219 = 'al',
    peg$c220 = peg$literalExpectation('AL', true),
    peg$c221 = 'bl',
    peg$c222 = peg$literalExpectation('BL', true),
    peg$c223 = 'cl',
    peg$c224 = peg$literalExpectation('CL', true),
    peg$c225 = 'dl',
    peg$c226 = peg$literalExpectation('DL', true),
    peg$c227 = function () {
      return { tag: 'Reg', name: text(), size: 1 };
    },
    peg$c228 = 'byte',
    peg$c229 = peg$literalExpectation('BYTE', true),
    peg$c230 = 'word',
    peg$c231 = peg$literalExpectation('WORD', true),
    peg$c232 = 'dword',
    peg$c233 = peg$literalExpectation('DWORD', true),
    peg$c234 = '',
    peg$c235 = function () {
      return 0;
    },
    peg$c236 = /^[a-zA-Z_]/,
    peg$c237 = peg$classExpectation([['a', 'z'], ['A', 'Z'], '_'], false, false),
    peg$c238 = /^[a-zA-Z_0-9]/,
    peg$c239 = peg$classExpectation([['a', 'z'], ['A', 'Z'], '_', ['0', '9']], false, false),
    peg$c240 = function () {
      return { tag: 'Identifier', value: text() };
    },
    peg$c241 = '0x',
    peg$c242 = peg$literalExpectation('0x', false),
    peg$c243 = /^[0-9a-fA-F]/,
    peg$c244 = peg$classExpectation(
      [
        ['0', '9'],
        ['a', 'f'],
        ['A', 'F'],
      ],
      false,
      false,
    ),
    peg$c245 = function () {
      return { tag: 'Number', value: parseInt(text(), 16), size: 4 };
    },
    peg$c246 = /^[0-9]/,
    peg$c247 = peg$classExpectation([['0', '9']], false, false),
    peg$c248 = function () {
      return { tag: 'Number', value: parseInt(text(), 10), size: 4 };
    },
    peg$c249 = "'",
    peg$c250 = peg$literalExpectation("'", false),
    peg$c251 = "\\'",
    peg$c252 = peg$literalExpectation("\\'", false),
    peg$c253 = function () {
      return "'";
    },
    peg$c254 = /^[^']/,
    peg$c255 = peg$classExpectation(["'"], true, false),
    peg$c256 = function (value) {
      return { tag: 'String', value: value };
    },
    peg$c257 = peg$otherExpectation('whitespace'),
    peg$c258 = /^[ \t\r]/,
    peg$c259 = peg$classExpectation([' ', '\t', '\r'], false, false),
    peg$c260 = peg$otherExpectation('whitespace_plus_lines'),
    peg$c261 = /^[ \t\r\n]/,
    peg$c262 = peg$classExpectation([' ', '\t', '\r', '\n'], false, false),
    peg$currPos = 0,
    peg$savedPos = 0,
    peg$posDetailsCache = [{ line: 1, column: 1 }],
    peg$maxFailPos = 0,
    peg$maxFailExpected = [],
    peg$silentFails = 0,
    peg$result;
  if ('startRule' in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
    }
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }
  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }
  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }
  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location,
    );
  }
  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
    throw peg$buildSimpleError(message, location);
  }
  function peg$literalExpectation(text, ignoreCase) {
    return { type: 'literal', text: text, ignoreCase: ignoreCase };
  }
  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }
  function peg$anyExpectation() {
    return { type: 'any' };
  }
  function peg$endExpectation() {
    return { type: 'end' };
  }
  function peg$otherExpectation(description) {
    return { type: 'other', description: description };
  }
  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
      p;
    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }
      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };
      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }
        p++;
      }
      peg$posDetailsCache[pos] = details;
      return details;
    }
  }
  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
      endPosDetails = peg$computePosDetails(endPos);
    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
  }
  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }
    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }
    peg$maxFailExpected.push(expected);
  }
  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }
  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location,
    );
  }
  function peg$parseStart() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c0) {
        s3 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c1);
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c2) {
            s5 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c3);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseComment();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$currPos;
                s10 = peg$parseDataLine();
                if (s10 !== peg$FAILED) {
                  peg$savedPos = s9;
                  s10 = peg$c4(s10);
                }
                s9 = s10;
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$currPos;
                  s10 = peg$parseDataLine();
                  if (s10 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s10 = peg$c4(s10);
                  }
                  s9 = s10;
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c5(s8);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c0) {
            s5 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c1);
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c6) {
                s7 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c7);
                }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseComment();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = [];
                    s11 = peg$currPos;
                    s12 = peg$parseTextLine();
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s11;
                      s12 = peg$c8(s2, s12);
                    }
                    s11 = s12;
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$currPos;
                      s12 = peg$parseTextLine();
                      if (s12 !== peg$FAILED) {
                        peg$savedPos = s11;
                        s12 = peg$c8(s2, s12);
                      }
                      s11 = s12;
                    }
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c9(s2, s10);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseEmptyLine() {
    var s0;
    s0 = peg$parseComment();
    if (s0 === peg$FAILED) {
      s0 = peg$parse_();
    }
    return s0;
  }
  function peg$parseComment() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c12);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c14);
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c13.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c14);
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseDataLine() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
    s0 = peg$currPos;
    s1 = peg$parseLabel();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDataSize();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDataConstant();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s9 = peg$c15;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c16);
                  }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parse_();
                  if (s10 !== peg$FAILED) {
                    s11 = peg$parseDataConstant();
                    if (s11 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c17(s1, s3, s5, s11);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s9 = peg$c15;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c16);
                    }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parse_();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseDataConstant();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s7;
                        s8 = peg$c17(s1, s3, s5, s11);
                        s7 = s8;
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseComment();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c18(s1, s3, s5, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseComment();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    return s0;
  }
  function peg$parseDataConstant() {
    var s0;
    s0 = peg$parseNumber();
    if (s0 === peg$FAILED) {
      s0 = peg$parseString();
    }
    return s0;
  }
  function peg$parseDataSize() {
    var s0, s1;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c20) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c21);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c22();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c23) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c24);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c27);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28();
        }
        s0 = s1;
      }
    }
    return s0;
  }
  function peg$parseTextLine() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLabel();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseInstruction();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseComment();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c29(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLabel();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseComment();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c30(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    return s0;
  }
  function peg$parseLabel() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c32);
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c34);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseInstruction() {
    var s0;
    s0 = peg$parseNoOperandInstruction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseJumpInstruction();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSingleOperandInstruction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMemoryInstruction();
          if (s0 === peg$FAILED) {
            s0 = peg$parseArithmeticInstruction();
            if (s0 === peg$FAILED) {
              s0 = peg$parseCompareInstruction();
            }
          }
        }
      }
    }
    return s0;
  }
  function peg$parseNoOperandInstruction() {
    var s0, s1;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c37);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c38) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c39);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c41);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c42) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c43);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {
              s1 = input.substr(peg$currPos, 5);
              peg$currPos += 5;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c45);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c46) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c47);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c48) {
                  s1 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c49);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c51);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c52();
    }
    s0 = s1;
    return s0;
  }
  function peg$parseJumpInstruction() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c53) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c54);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c55) {
        s2 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c56);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c57) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c58);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c59) {
            s2 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c60);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c61) {
              s2 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c62);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c63) {
                s2 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c64);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c65) {
                  s2 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c66);
                  }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c67) {
                    s2 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c68);
                    }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c69) {
                      s2 = input.substr(peg$currPos, 3);
                      peg$currPos += 3;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c70);
                      }
                    }
                    if (s2 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c71) {
                        s2 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c72);
                        }
                      }
                      if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c73) {
                          s2 = input.substr(peg$currPos, 3);
                          peg$currPos += 3;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c74);
                          }
                        }
                        if (s2 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c75) {
                            s2 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c76);
                            }
                          }
                          if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c77) {
                              s2 = input.substr(peg$currPos, 3);
                              peg$currPos += 3;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c78);
                              }
                            }
                            if (s2 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c79) {
                                s2 = input.substr(peg$currPos, 2);
                                peg$currPos += 2;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c80);
                                }
                              }
                              if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c81) {
                                  s2 = input.substr(peg$currPos, 4);
                                  peg$currPos += 4;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c82);
                                  }
                                }
                                if (s2 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c83) {
                                    s2 = input.substr(peg$currPos, 2);
                                    peg$currPos += 2;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$c84);
                                    }
                                  }
                                  if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c85) {
                                      s2 = input.substr(peg$currPos, 4);
                                      peg$currPos += 4;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$c86);
                                      }
                                    }
                                    if (s2 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c87) {
                                        s2 = input.substr(peg$currPos, 3);
                                        peg$currPos += 3;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c88);
                                        }
                                      }
                                      if (s2 === peg$FAILED) {
                                        if (
                                          input.substr(peg$currPos, 3).toLowerCase() === peg$c89
                                        ) {
                                          s2 = input.substr(peg$currPos, 3);
                                          peg$currPos += 3;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$c90);
                                          }
                                        }
                                        if (s2 === peg$FAILED) {
                                          if (
                                            input.substr(peg$currPos, 3).toLowerCase() === peg$c91
                                          ) {
                                            s2 = input.substr(peg$currPos, 3);
                                            peg$currPos += 3;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$c92);
                                            }
                                          }
                                          if (s2 === peg$FAILED) {
                                            if (
                                              input.substr(peg$currPos, 3).toLowerCase() === peg$c93
                                            ) {
                                              s2 = input.substr(peg$currPos, 3);
                                              peg$currPos += 3;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$c94);
                                              }
                                            }
                                            if (s2 === peg$FAILED) {
                                              if (
                                                input.substr(peg$currPos, 2).toLowerCase() ===
                                                peg$c95
                                              ) {
                                                s2 = input.substr(peg$currPos, 2);
                                                peg$currPos += 2;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                  peg$fail(peg$c96);
                                                }
                                              }
                                              if (s2 === peg$FAILED) {
                                                if (
                                                  input.substr(peg$currPos, 4).toLowerCase() ===
                                                  peg$c97
                                                ) {
                                                  s2 = input.substr(peg$currPos, 4);
                                                  peg$currPos += 4;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) {
                                                    peg$fail(peg$c98);
                                                  }
                                                }
                                                if (s2 === peg$FAILED) {
                                                  if (
                                                    input.substr(peg$currPos, 4).toLowerCase() ===
                                                    peg$c99
                                                  ) {
                                                    s2 = input.substr(peg$currPos, 4);
                                                    peg$currPos += 4;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                      peg$fail(peg$c100);
                                                    }
                                                  }
                                                  if (s2 === peg$FAILED) {
                                                    if (
                                                      input.substr(peg$currPos, 5).toLowerCase() ===
                                                      peg$c101
                                                    ) {
                                                      s2 = input.substr(peg$currPos, 5);
                                                      peg$currPos += 5;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) {
                                                        peg$fail(peg$c102);
                                                      }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                      if (
                                                        input
                                                          .substr(peg$currPos, 2)
                                                          .toLowerCase() === peg$c103
                                                      ) {
                                                        s2 = input.substr(peg$currPos, 2);
                                                        peg$currPos += 2;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                          peg$fail(peg$c104);
                                                        }
                                                      }
                                                      if (s2 === peg$FAILED) {
                                                        if (
                                                          input
                                                            .substr(peg$currPos, 3)
                                                            .toLowerCase() === peg$c105
                                                        ) {
                                                          s2 = input.substr(peg$currPos, 3);
                                                          peg$currPos += 3;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) {
                                                            peg$fail(peg$c106);
                                                          }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                          if (
                                                            input
                                                              .substr(peg$currPos, 3)
                                                              .toLowerCase() === peg$c107
                                                          ) {
                                                            s2 = input.substr(peg$currPos, 3);
                                                            peg$currPos += 3;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                              peg$fail(peg$c108);
                                                            }
                                                          }
                                                          if (s2 === peg$FAILED) {
                                                            if (
                                                              input
                                                                .substr(peg$currPos, 3)
                                                                .toLowerCase() === peg$c109
                                                            ) {
                                                              s2 = input.substr(peg$currPos, 3);
                                                              peg$currPos += 3;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) {
                                                                peg$fail(peg$c110);
                                                              }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                              if (
                                                                input
                                                                  .substr(peg$currPos, 2)
                                                                  .toLowerCase() === peg$c111
                                                              ) {
                                                                s2 = input.substr(peg$currPos, 2);
                                                                peg$currPos += 2;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                  peg$fail(peg$c112);
                                                                }
                                                              }
                                                              if (s2 === peg$FAILED) {
                                                                if (
                                                                  input
                                                                    .substr(peg$currPos, 3)
                                                                    .toLowerCase() === peg$c113
                                                                ) {
                                                                  s2 = input.substr(peg$currPos, 3);
                                                                  peg$currPos += 3;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c114);
                                                                  }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                  if (
                                                                    input
                                                                      .substr(peg$currPos, 2)
                                                                      .toLowerCase() === peg$c115
                                                                  ) {
                                                                    s2 = input.substr(
                                                                      peg$currPos,
                                                                      2,
                                                                    );
                                                                    peg$currPos += 2;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                      peg$fail(peg$c116);
                                                                    }
                                                                  }
                                                                  if (s2 === peg$FAILED) {
                                                                    if (
                                                                      input
                                                                        .substr(peg$currPos, 3)
                                                                        .toLowerCase() === peg$c117
                                                                    ) {
                                                                      s2 = input.substr(
                                                                        peg$currPos,
                                                                        3,
                                                                      );
                                                                      peg$currPos += 3;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c118);
                                                                      }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                      if (
                                                                        input
                                                                          .substr(peg$currPos, 4)
                                                                          .toLowerCase() ===
                                                                        peg$c119
                                                                      ) {
                                                                        s2 = input.substr(
                                                                          peg$currPos,
                                                                          4,
                                                                        );
                                                                        peg$currPos += 4;
                                                                      } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                          peg$fail(peg$c120);
                                                                        }
                                                                      }
                                                                      if (s2 === peg$FAILED) {
                                                                        if (
                                                                          input
                                                                            .substr(peg$currPos, 4)
                                                                            .toLowerCase() ===
                                                                          peg$c121
                                                                        ) {
                                                                          s2 = input.substr(
                                                                            peg$currPos,
                                                                            4,
                                                                          );
                                                                          peg$currPos += 4;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (
                                                                            peg$silentFails === 0
                                                                          ) {
                                                                            peg$fail(peg$c122);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseJumpTargetExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c123(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseSingleOperandInstruction() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c124) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c125);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c126) {
        s2 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c127);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c128) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c129);
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWritableExpression();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c130(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c131) {
        s2 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c132);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c134);
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseReadableExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c130(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    return s0;
  }
  function peg$parseMemoryInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c135) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c136);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c137) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c138);
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWritableExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c15;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c16);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseReadableExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c139(s1, s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseArithmeticInstruction() {
    var s0, s1, s2, s3, s4, s5, s6;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c140) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c141);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c142) {
        s2 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c143);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c144) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c145);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
            s2 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c147);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {
              s2 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c149);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c150) {
                s2 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c151);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c152) {
                  s2 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c153);
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWritableExpression();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c16);
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseReadableExpression();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c154(s1, s3, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c155) {
        s2 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c156);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c157) {
          s2 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c158);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c159) {
            s2 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c160);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c161) {
              s2 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c162);
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseReadableExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c163(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    return s0;
  }
  function peg$parseCompareInstruction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c164) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c165);
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseReadableExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c15;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c16);
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseReadableExpression();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c166(s1, s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseWritableExpression() {
    var s0, s1, s2, s3;
    s0 = peg$parseRegister();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSizeCast();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRegisterDereferenceExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c167(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSizeCast();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAddressDereferenceExpression();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c167(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    return s0;
  }
  function peg$parseReadableExpression() {
    var s0, s1, s2, s3;
    s0 = peg$parseRegister();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSizeCast();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRegisterDereferenceExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c167(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSizeCast();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseAddressDereferenceExpression();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c167(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseSizeCast();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLabelExpression();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c167(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseSizeCast();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseNumber();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c167(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    return s0;
  }
  function peg$parseJumpTargetExpression() {
    var s0;
    s0 = peg$parseLabelExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumber();
    }
    return s0;
  }
  function peg$parseAddressDereferenceExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c168;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c169);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseLabelExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIndexExpression();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s7 = peg$c170;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c171);
                  }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c172(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c168;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c169);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseNumber();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIndexExpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s7 = peg$c170;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c171);
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c173(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    return s0;
  }
  function peg$parseLabelExpression() {
    var s0, s1, s2;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c32);
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c174(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseRegisterDereferenceExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c168;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c169);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseRegister();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIndexExpression();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s7 = peg$c170;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c171);
                  }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c175(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseIndexExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c176;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c177);
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseRegister();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s6 = peg$c178;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c179);
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseNumber();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s1;
                  s2 = peg$c180(s4, s8);
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c176;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c177);
          }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c181;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c182);
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseNumber();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c183(s1, s4, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c184(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseRegister() {
    var s0, s1;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c186);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c188);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c189) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c190);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c191) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c192);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c194);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c195) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c196);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {
                  s1 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c198);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c199) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c200);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c201();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c202) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c203);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c204) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c205);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c206) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c207);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c208) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c209);
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c210();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c211) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c212);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c213) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c214);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c215) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c216);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c217) {
                s1 = input.substr(peg$currPos, 2);
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c218);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c219) {
                  s1 = input.substr(peg$currPos, 2);
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c220);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c221) {
                    s1 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c222);
                    }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c223) {
                      s1 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c224);
                      }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c225) {
                        s1 = input.substr(peg$currPos, 2);
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c226);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c227();
        }
        s0 = s1;
      }
    }
    return s0;
  }
  function peg$parseSizeCast() {
    var s0, s1;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c228) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c229);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c22();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c230) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c231);
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c25();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c232) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c233);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$c234;
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c235();
          }
          s0 = s1;
        }
      }
    }
    return s0;
  }
  function peg$parseIdentifier() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    if (peg$c236.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c237);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c238.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c239);
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c238.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c239);
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c240();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parseNumber() {
    var s0, s1, s2, s3;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c241) {
      s1 = peg$c241;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c242);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c243.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c244);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c243.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c244);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c245();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c181;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c182);
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c246.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c247);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c246.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c247);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c248();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    return s0;
  }
  function peg$parseString() {
    var s0, s1, s2, s3, s4;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c249;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c250);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c251) {
        s4 = peg$c251;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c252);
        }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s3;
        s4 = peg$c253();
      }
      s3 = s4;
      if (s3 === peg$FAILED) {
        if (peg$c254.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c255);
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c251) {
          s4 = peg$c251;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c252);
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c253();
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          if (peg$c254.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c255);
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c249;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c250);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c256(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    return s0;
  }
  function peg$parse_() {
    var s0, s1;
    peg$silentFails++;
    s0 = [];
    if (peg$c258.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c259);
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c258.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c259);
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c257);
      }
    }
    return s0;
  }
  function peg$parse__() {
    var s0, s1;
    peg$silentFails++;
    s0 = [];
    if (peg$c261.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c262);
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c261.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c262);
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c260);
      }
    }
    return s0;
  }
  peg$result = peg$startRuleFunction();
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }
    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    );
  }
}
export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse,
};
