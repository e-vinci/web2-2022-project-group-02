name: deploy-emsdk

on:
  push:
    branches:
      - 'sdk-*'

jobs:
  tests:
    strategy:
      matrix:
        os: [macos-latest,windows-latest,ubuntu-latest]
        node-version: [15.x, 14.x, 12.x]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - run: npm install
    - run: npm test

  deploy:
    needs: tests

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .npmrc to publish to NPM
      uses: actions/setup-node@v2
      with:
        node-version: 12.x
        registry-url: https://registry.npmjs.org

    - name: Setup Git user
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Bump version number
      run: npm version prerelease
    
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: Publish sdk version tag to NPM
      run: npm publish --tag="${GITHUB_REF##*/}" --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Checkout emsdk repo
      uses: actions/checkout@v2
      with:
        repository: emscripten-core/emsdk
        path: 'emsdk'

    - name: Find latest sdk version
      uses: actions/github-script@v3
      id: new_version
      with:
        script: |
          const path = require('path');
          const fs = require('fs');

          const emsdkPath = path.join(process.env.GITHUB_WORKSPACE, 'emsdk');

          function getReleaseTags() {
            const tagsFile = path.join(emsdkPath, 'emscripten-releases-tags.txt');
            const rawData = fs.readFileSync(tagsFile);
            return JSON.parse(rawData);
          }

          const emsdkVersions = getReleaseTags().releases;
          
          console.log(`Latest SDK version is ${emsdkVersions.latest}`);

          return emsdkVersions.latest;
        result-encoding: string
    
    - name: If this branch is latest sdk version, then push the `latest` tag to NPM
      uses: actions/github-script@v3
      with:
        script: |
          const path = require('path');
          const fs = require('fs');
          const execSync = require('child_process').execSync;

          const npmPath = path.join(process.env.GITHUB_WORKSPACE);

          const packagePath = path.join(npmPath, 'package.json')
          const package = JSON.parse(fs.readFileSync(packagePath));

          if (package.version.includes(`${{ steps.new_version.outputs.result }}`)) {
            console.log(execSync(`npm dist-tag add ${package.name}@${package.version} latest`, { cwd: npmPath }).toString());
          } else
            console.log(`Package version ${package.version} is not latest.`);
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
